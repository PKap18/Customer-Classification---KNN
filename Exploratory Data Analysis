#Analyzing the cleaned data to find what all features impact the price of the car.

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline
import matplotlib.pyplot as plt
%matplotlib inline 
from scipy import stats



path='https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DA0101EN/automobileEDA.csv'
df = pd.read_csv(path)
df.head()

## Using visualization for analyzing patterns
df.corr()
df[["engine-size", "price"]].corr()  
#the correlation between 'engine-size' and 'price' is approximately 0.87 -- Positive linear corelation
sns.regplot(x="engine-size", y="price", data=df)
plt.ylim(0,)

sns.regplot(x="highway-mpg", y="price", data=df)
#the correlation between 'highway-mpg' and 'price' is approximately -0.704  --Negative linear corelation
df[['highway-mpg', 'price']].corr()

sns.regplot(x="peak-rpm", y="price", data=df)
#the correlation between 'peak-rpm' and 'price' is approximately -0.101616 -- Weak linear corelation

sns.regplot(x='stroke',y='price',data=df)

#visualize categorical variables by using boxplots.
sns.boxplot(x="body-style", y="price", data=df)
sns.boxplot(x="engine-location", y="price", data=df)

#Statistical Analysis
df.describe()
df.describe(include=['object'])

#Grouping of Data
df['drive-wheels'].unique()
df_group_one = df[['drive-wheels','body-style','price']]

# grouping results
df_group_one = df_group_one.groupby(['drive-wheels'],as_index=False).mean()

#multiple group by conditions
df_gptest = df[['drive-wheels','body-style','price']]
grouped_test1 = df_gptest.groupby(['drive-wheels','body-style'],as_index=False).mean()

#Pivotin the grouped data
grouped_pivot = grouped_test1.pivot(index='drive-wheels',columns='body-style')
#fill missing values with 0
grouped_pivot = grouped_pivot.fillna(0)

df_gptest1=df[['body-style','price']]
grouped_test2=df_gptest1.groupby(['body-style'],as_index=False).mean()
grouped_test2

#visualizing Drive Wheels and Body Style vs Price using Pyplot
plt.pcolor(grouped_pivot, cmap='RdBu')
plt.colorbar()
plt.show()
fig, ax = plt.subplots()
im = ax.pcolor(grouped_pivot, cmap='RdBu')

#label names
row_labels = grouped_pivot.columns.levels[1]
col_labels = grouped_pivot.index

#move ticks and labels to the center
ax.set_xticks(np.arange(grouped_pivot.shape[1]) + 0.5, minor=False)
ax.set_yticks(np.arange(grouped_pivot.shape[0]) + 0.5, minor=False)

#insert labels
ax.set_xticklabels(row_labels, minor=False)
ax.set_yticklabels(col_labels, minor=False)

#rotate label if too long
plt.xticks(rotation=90)

fig.colorbar(im)
plt.show()

'''Pearson Correlation: a value between -1 and 1 inclusive, 
where:1: Total positive linear correlation, 
0: No linear correlation, the two variables most likely do not affect each other, 
-1: Total negative linear correlation'''

df.corr()

'''P-value:probability value that the correlation between these two variables is statistically significant. We choose a 
significance level of 0.05, which means that we are 95% confident that the correlation between the variables is significant'''

pearson_coef, p_value = stats.pearsonr(df['wheel-base'], df['price'])
print("The Pearson Correlation Coefficient is", pearson_coef, " with a P-value of P =", p_value)  

'''Since the p-value is  <  0.001, the correlation between wheel-base and price is statistically significant, although the linear
relationship isn't extremely strong (~0.585)'''

pearson_coef, p_value = stats.pearsonr(df['horsepower'], df['price'])
print("The Pearson Correlation Coefficient is", pearson_coef, " with a P-value of P = ", p_value)  
'''p-value is  <  0.001, the correlation between horsepower and price is statistically significant,
and the linear relationship is quite strong (~0.809, close to 1)'''

pearson_coef, p_value = stats.pearsonr(df['length'], df['price'])
print("The Pearson Correlation Coefficient is", pearson_coef, " with a P-value of P = ", p_value)  
pearson_coef, p_value = stats.pearsonr(df['width'], df['price'])
print("The Pearson Correlation Coefficient is", pearson_coef, " with a P-value of P =", p_value ) 
pearson_coef, p_value = stats.pearsonr(df['curb-weight'], df['price'])
print( "The Pearson Correlation Coefficient is", pearson_coef, " with a P-value of P = ", p_value)  
pearson_coef, p_value = stats.pearsonr(df['engine-size'], df['price'])
print("The Pearson Correlation Coefficient is", pearson_coef, " with a P-value of P =", p_value) 
pearson_coef, p_value = stats.pearsonr(df['bore'], df['price'])
print("The Pearson Correlation Coefficient is", pearson_coef, " with a P-value of P =  ", p_value ) 
pearson_coef, p_value = stats.pearsonr(df['city-mpg'], df['price'])
print("The Pearson Correlation Coefficient is", pearson_coef, " with a P-value of P = ", p_value)  
pearson_coef, p_value = stats.pearsonr(df['highway-mpg'], df['price'])
print( "The Pearson Correlation Coefficient is", pearson_coef, " with a P-value of P = ", p_value ) 


#ANOVA: test whether there are significant differences between the means of two or more groups using F-test score and P-value
grouped_test2=df_gptest[['drive-wheels', 'price']].groupby(['drive-wheels'])

grouped_test2.get_group('4wd')['price']
f_val, p_val = stats.f_oneway(grouped_test2.get_group('fwd')['price'], grouped_test2.get_group('rwd')['price'], grouped_test2.get_group('4wd')['price'])  
print( "ANOVA results: F=", f_val, ", P =", p_val)

f_val, p_val = stats.f_oneway(grouped_test2.get_group('fwd')['price'], grouped_test2.get_group('rwd')['price'])  
print( "ANOVA results: F=", f_val, ", P =", p_val )

f_val, p_val = stats.f_oneway(grouped_test2.get_group('4wd')['price'], grouped_test2.get_group('rwd')['price'])  
print( "ANOVA results: F=", f_val, ", P =", p_val) 

f_val, p_val = stats.f_oneway(grouped_test2.get_group('4wd')['price'], grouped_test2.get_group('fwd')['price'])  
print("ANOVA results: F=", f_val, ", P =", p_val)   

